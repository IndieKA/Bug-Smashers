/**THIS WAS MADE BY ME AND OTHER PEOPLE.
 * Credits to:
 * Coderman64: For slider, apps, and half-of Minecraft.
 * 
*/
//Some features were made by coderman64
var walking = false;
var macMode = false;//mode designed for a 1-button mouse
var Skies = true;//the "Pretty skies" setting
var underbc = true;//turn on and off the background shown underground
var curBlock = 1;//current selected block
if(macMode === true){
    curBlock = 0;
}
var sc1 = 3;//scale
var keys = [];
var slev = 19;
var characterloc = [16*50+5,16*(slev-2)]; //location
var characterVel = new PVector(0,0);
var feet = 0; 
var frn = 0;
var bck = 0;
var top = 0;
var bftop = [];
var direction = 1; //facing direction 
var clouds = [0,0,0]; //stores cloud location and scale: [x,y,scale]
var time = 100; //starting time
var night = false; //tells day from night
var functions = [false,false];
var inventory = [];
var itemStack = function(name, amount, blockNum){
    this.name = name;
    this.amount = amount;
    this.blockNum = blockNum;
};
var hotSel = 0; //hotbar selection
for(var i = 0;i<41;i++){
    inventory[i] = new itemStack("",0,-1);
}
var inhand = new itemStack("",0,-1);
var inventoryAdd = function(blockNum,amount){
    if(amount === null||amount === undefined){
        amount = 1;
    }
    var inInventory = false;
    for(var i = 0;i<inventory.length;i++){
        if(inventory[i].blockNum === blockNum&&inventory[i].amount<64){
            inventory[i].amount += amount;
            inInventory = true;
            break;
        }
    }
    if(inInventory === false){
        for(var i = 0;i<inventory.length;i++){
            if(inventory[i].blockNum&&inInventory === false){
                if(inventory[i].amount === 0){
                    inventory[i].blockNum = blockNum;
                    inventory[i].amount = amount;
                    inInventory = true;
                    break;
                }
            }
        }
    }
};
var sound = {
    hitBlock: getSound("rpg/step-heavy"),
    button: getSound("rpg/metal-clink"),
    logo1: getSound("retro/boom2"),
    logo2: getSound("retro/coin"),
};
var lin = [];
var animation = 0;
textSize(12);
var mouseIn = function(x,y,w,h){
    if(mouseX>x&mouseY>y&mouseX<x+w&mouseY<y+h){
        return true;
    }else{
        return false;
    }
};
var equalToAny = function(value,array1){
    var res = false;
    for(var i = 0;i<array1.length;i++){
        if(array1[i] === value){
            res = true;
        }
    }
    return res;
};
var breakTime = 0;
var brokenTime = 20;
var worldSpawn = function(www,sl,width,height){
    for(var b = 0;b<height;b++){
        www[b] = [];
        for(var n = 0;n<width;n++){
            if(b === sl){
                //ponds and grass
                if(min(random(-3,2),1) === 1 & www[b-1][n] !== 3 & (n > 53|n<50)){
                    www[b][n]=5;
                    www[b][n-1]=5;
                    www[b][n-2]=5;
                }else{
                    www[b][n] = 1;
                }
            }else{
            if(b === sl-1 & n !== 50){
                //trees
                if(1 === min(random(-5,2),1)){
                    www[b][n] = 3;
                    www[b-1][n] = 3;
                    www[b-2][n] = 4;
                    www[b-2][n-1] = 4;
                    www[b-2][n+1] = 4;
                    www[b-3][n] = 4;
                }else{
                    www[b][n] = 0;
                }
            }else{if(n > sl+1){
                //rock (underground)
                www[b][n] = 2;
            }else{if(b > sl){
                //directionn
                www[b][n] = 6;
            }else{
                //air
                www[b][n] = 0;
            }}}}
            
        }
        www[floor(characterloc[1]/16)][floor(characterloc[0]/16)] = 0;
    }
    return www;
    
};
var sl = 0;
var worldNoise = function(www,w,h){
    for(var i = 0;i<h;i++){
        www[i] = [];
        for(var b = 0;b<w;b++){
        }
    }
    for(var i = 0;i<w;i++){
        www[sl][i] = 1;
        sl = round(noise(i*0.02)*h);
        for(var n = 0; n < h ; n++){
            if(www[n][i] !== 4){
                www[n][i] = 0;
            }
            if(n>sl){
                if(round(random(1,20)) === 1){
                    www[n][i] = 15;
                }else{
                    www[n][i] = 2;
                }
            }
            if(sl<=slev+1){
                www[sl][i] = 1;
            }
            if(n>slev){
                if(www[n][i] === 0){
                    www[n][i] = 5;
                }
            }
            if(n-1 > 0){
                if((www[n-1][i] === 5 || www[n-1][i] === 1)&&(www[n][i] !== 5)){
                    www[n-1][i] = 6;
                    www[n][i]=6;
                }
            }
        }
        if(min(random(1,7),5) === 5 && sl<slev){
            www[sl-1][i] = 3;
            www[sl-2][i] = 3;
            www[sl-3][i-1] = 4;
            www[sl-3][i+1] = 4;
            www[sl-3][i] = 4;
            www[sl-4][i] = 4;
        }
    }
    return www;
};
var world = [];
var mouseCoordinateX = 0;
var mouseCoordinateY = 0;
world = worldNoise(world,400,40);
var backo = [];
for(var i = 0;i<world.length;i++){
    backo[i] = [];
    for(var b = 0;b<world[i].length;b++){
        if(world[i][b] === 2){
            backo[i][b] = true;
        }
    }
}
var inWorld = function(x,y){
    if(y/16 > world.length-1 |  y < 0){
        return false;
    }else{if(x/16 > world[slev].length-1 | x < 0){
        return false;
    }else{
        return true;
    }}
};
var learn = false;
var waterFlow = function(){
    for(var y = 0;y<world.length;y++){
        for(var x = 0;x<world[y].length;x++){
            if(world[y][x] === 5){
                if(world[y+1][x] === 0 | world[y+1][x] === 5){
                    world[y+1][x] = 5;
                }else{if(world[y][x+1] === 0){
                    world[y][x+1] = 5;
                }
                if(world[y][x-1] === 0){
                    world[y][x-1] = 5;
                }
                }
                if(world[y-1][x] === 0){
                    world[y][x] = 10;
                }
            }
        }
    }
};
var grass = function(x,y) {
    fill(115, 86, 0);
    rect(x*sc1,y*sc1,16*sc1,16*sc1);
    fill(0, 143, 0);
    fill(98, 255, 0);
    rect(x*sc1,y*sc1,16*sc1,3*sc1);
};
var stone = function(x,y) {
    fill(128, 128, 128);
    rect(x*sc1,y*sc1,16*sc1,16*sc1);
};
var wood = function(x,y) {
    fill(99, 83, 0);
    rect(x*sc1,y*sc1,16*sc1,16*sc1);
    fill(61, 34, 0);
    rect(x*sc1,y*sc1,2*sc1,16*sc1);
    rect((x+14)*sc1,y*sc1,2*sc1,16*sc1);
};
var leaves = function(x,y) {
    fill(34, 255, 0);
    rect(x*sc1,y*sc1,16*sc1,16*sc1);
};
var water = function(x,y) {
    fill(0, 0, 255,90);
    rect(x*sc1,y*sc1,16*sc1,16*sc1);
    if(world[y/16+1][floor(x/16)] === 5){
        fill(0, 251, 255);
        rect(x*sc1,(y+animation)*sc1,16*sc1,1);
    }
};
var directionn = function(x,y) {
    fill(115, 86, 0);
    rect(x*sc1,y*sc1,16*sc1,16*sc1);
};
var ice = function(x,y){
    fill(0, 196, 255,100);
    rect(x*sc1,y*sc1,16*sc1,16*sc1);
    stroke(255, 255, 255,100);
    line((x+4)*sc1,(y+4)*sc1,(x+12)*sc1,(y+12)*sc1);
    line((x+4)*sc1,(y+9)*sc1,(x+7)*sc1,(y+12)*sc1);
    line((x+9)*sc1,(y+4)*sc1,(x+12)*sc1,(y+7)*sc1);
    noStroke();
};
var cobblestone = function(x,y){
    fill(74, 73, 74);
    rect(x*sc1,y*sc1,16*sc1,16*sc1);
    stroke(0, 0, 0,101);
    strokeWeight(1);
    line((x+8)*sc1,(y+8)*sc1,(x+6)*sc1,(y+4)*sc1);
    line((x+8)*sc1,(y+8)*sc1,(x+12)*sc1,(y+4)*sc1);
    line((x+8)*sc1,(y+8)*sc1,(x+4)*sc1,(y+14)*sc1);
    line((x+0)*sc1,(y+6)*sc1,(x+6)*sc1,(y+4)*sc1);
    line((x+16)*sc1,(y+6)*sc1,(x+12)*sc1,(y+4)*sc1);
    line((x+7)*sc1,(y+16)*sc1,(x+4)*sc1,(y+14)*sc1);
    line((x+7)*sc1,(y)*sc1,(x+6)*sc1,(y+4)*sc1);
    line((x+10)*sc1,(y)*sc1,(x+12)*sc1,(y+4)*sc1);
    line((x+10)*sc1,(y+14)*sc1,(x+8)*sc1,(y+8)*sc1);
    line((x+10)*sc1,(y+14)*sc1,(x+10)*sc1,(y+16)*sc1);
    line((x+10)*sc1,(y+14)*sc1,(x+16)*sc1,(y+12)*sc1);
    line((x+4)*sc1,(y+14)*sc1,(x)*sc1,(y+12)*sc1);
    noStroke();
};
var ironOre = function(x,y) {
    fill(128, 128, 128);
    rect(x*sc1,y*sc1,16*sc1,16*sc1);
    fill(255, 228, 110);
    ellipse((x+2)*sc1,(y+5)*sc1,4*sc1,3*sc1);
    ellipse((x+8)*sc1,(y+11)*sc1,8*sc1,6*sc1);
    ellipse((x+12)*sc1,(y+3)*sc1,5*sc1,3*sc1);
};
var block = function(x,y,type){
    x = floor(x*16);
    y = floor(y*16);
    if(type === 1){
        grass(x,y);
    }
    if(type === 2){
        stone(x,y);
    }
    if(type === 3){
        wood(x,y);
    }
    if(type === 4){
        leaves(x,y);
    }
    if(type === 5){
        water(x,y);
    }
    if(type === 6){
        directionn(x,y);
    }
    if(type === 10){
        ice(x,y);
    }
    if(type === 11){
        cobblestone(x,y);
    }
    if(type === 15){
        ironOre(x,y);
    }
};
var character = function(x,y,back){
    x = x*sc1;
    y = y*sc1;
    translate(x,y);
    pushMatrix();
    translate(2*sc1,21*sc1);
    rectMode(CENTER);
    if(keyIsPressed === true){
        if(walking === true){
        if((animation > 0 & animation < 4)){
        fill(2, 2, 196);
        rotate(55);
        rect(5.5*sc1,0,11*sc1,4*sc1);
        rotate(-20);
        
        }else{if((animation > 8 & animation < 12)){
            fill(0, 0, 143);
        rotate(125);
        rect(5.5*sc1,0,11*sc1,4*sc1);
        rotate(-155);
        }
            rotate(0);
        }}
    }
    fill(4, 0, 255);
    rect(0,5.5*sc1,4*sc1,11*sc1);
    rectMode(CORNER);
    popMatrix();
    fill(0, 200, 255);
    rect(0,0,4*sc1,21*sc1);
    pushMatrix();
    //head
    fill(255, 242, 161);
    rect(-2*sc1,0,8*sc1,8*sc1);
    fill(82, 52, 1);
    rect(-2*sc1,0,8*sc1,2*sc1);
    rect(1*sc1-2*sc1*(back*1.5),0,2*sc1,5*sc1);
    popMatrix();
    //arm
    
    translate(2*sc1,10*sc1);
    if(mouseIsPressed === true&&(breakTime/4 === floor(breakTime/4)||mouseButton === RIGHT)){
        rotate(120*back);
    }else{
        rotate(180);
    }
    
    var tmpo = sc1;
    rotate(180+30*back);
    sc1 = 1;
    block(1.5*back-0.5,0.5,curBlock);
    sc1 = tmpo;
    
    rotate(180-30*back);
    fill(255, 242, 161);
    rectMode(CENTER);
    rect(0,-5*sc1,4*sc1,10*sc1);
    fill(0, 187, 255);
    rect(0,0*sc1,4*sc1,4*sc1);
    
    fill(255, 242, 161);
    rectMode(CORNER);
    resetMatrix();
    characterloc[1] += characterVel.x;
    characterloc[0] += characterVel.y;
};
var itemList = [];
var itemo = function(x,y,blockNum){
    this.x = x;
    this.y = y;
    this.blockNum = blockNum;
    this.vel = new PVector(random(-1,1),0);
};
itemo.prototype.draw = function() {
    var tmpo = sc1;
    sc1 = 1;
    block(this.x/16,this.y/16,this.blockNum);
    sc1 = tmpo;
    this.x += this.vel.x;
    this.y += this.vel.y;
    var tmp2 = world[floor((this.y+16)/16/sc1)][floor((this.x)/16/sc1)];
    if(tmp2 === 0||tmp2 === 9||tmp2 === 5){
        if(tmp2 === 5){
            this.vel.y = 2;
        }else{
            this.vel.y++;
        }
    }else{
        this.vel.y = 0;
        this.vel.x = 0;
        this.y = floor(this.y/16)*16;
    }
};
var pDoor = false;
var cantplace = [12];
var cont = function(){
    cursor(CROSS);
    //mouseCoordinateY and mouseCoordinateX are the x and y co-ordinates of the mouse, which are changed here for eaiser interaction with the block storage system
    mouseCoordinateX = mouseX/16/sc1+characterloc[0]/16-12.6/sc1;
    mouseCoordinateY = mouseY/16/sc1+characterloc[1]/16-9.5/sc1;
    mouseCoordinateX = floor(mouseCoordinateX);
    mouseCoordinateY = floor(mouseCoordinateY);
    if(mouseCoordinateX !== floor(pmouseX/16/sc1+characterloc[0]/16-12.6/sc1)||mouseCoordinateY !== floor(pmouseY/16/sc1+characterloc[1]/16-9.5/sc1)){
        breakTime = 0;
    }
    for(var i = 0;i<itemList.length;i++){
        itemList[i].draw();
        if(itemList[i].x-16*sc1<characterloc[0]*sc1&&itemList[i].x+16*sc1>characterloc[0]*sc1){
            if(itemList[i].y<(characterloc[1]+32)*sc1&&itemList[i].y+16*sc1>characterloc[1]*sc1){
                inventoryAdd(itemList[i].blockNum);
                itemList.splice(i,1);
            }
        }
    }
    if(world[mouseCoordinateY][mouseCoordinateX] === 1||world[mouseCoordinateY][mouseCoordinateX] === 6){
        brokenTime = 12;
    }else if(world[mouseCoordinateY][mouseCoordinateX] === 4){
        brokenTime = 3;
    }else if(world[mouseCoordinateY][mouseCoordinateX] === 2||world[mouseCoordinateY][mouseCoordinateX] === 11){
        brokenTime = 80;
    }else if(world[mouseCoordinateY][mouseCoordinateX] === 5){
        brokenTime = 0;
    }else{
        brokenTime = 20;
    }
    fill(255, 255, 255,50);
    if(inWorld(mouseCoordinateX,mouseCoordinateY)){
        if(world[mouseCoordinateY][mouseCoordinateX] !== 0 && world[mouseCoordinateY][mouseCoordinateX] !== 8){
            //highlight a solid block
            rect(mouseCoordinateX*16*sc1,mouseCoordinateY*16*sc1,16*sc1,16*sc1);
        }
        if(world[mouseCoordinateY][mouseCoordinateX] === 8){
            //hightight a torch
            rect(mouseCoordinateX*16*sc1+7*sc1,mouseCoordinateY*16*sc1+6*sc1,2*sc1,10*sc1);
        }
    }
    if(mouseIsPressed === true & mouseIn(300,370,100,30) !== true){
        //mouse left and right button controls
        if(mouseButton === LEFT){
            if(inWorld(mouseCoordinateX,mouseCoordinateY)){
                if(macMode === true){
                    if(world[mouseCoordinateX][mouseCoordinateY] === 0){
                        playSound(sound.hitBlock);
                        world[mouseCoordinateY][mouseCoordinateX] = curBlock;
                    }else if(curBlock === 0){
                        world[mouseCoordinateY][mouseCoordinateX] = curBlock;
                    }
                }else{
                    if(world[mouseCoordinateY][mouseCoordinateX] !== 0&&world[mouseCoordinateY][mouseCoordinateX] !== 5){
                        if(breakTime >= brokenTime){
                            if(world[mouseCoordinateY][mouseCoordinateX] === 2){
                                itemList[itemList.length] = new itemo(mouseCoordinateX*16*sc1+16,mouseCoordinateY*16*sc1+16,11);   
                            }else if(world[mouseCoordinateY][mouseCoordinateX] === 1){
                                itemList[itemList.length] = new itemo(mouseCoordinateX*16*sc1+16,mouseCoordinateY*16*sc1+16,6);   
                            }else{
                                
                                if(world[mouseCoordinateY][mouseCoordinateX] === 14.5||world[mouseCoordinateY][mouseCoordinateX] === 14.6){
                                    world[mouseCoordinateY+1][mouseCoordinateX] = 0;
                                    itemList[itemList.length] = new itemo(mouseCoordinateX*16*sc1+16,mouseCoordinateY*16*sc1+16,14);
                                }else if(floor(world[mouseCoordinateY][mouseCoordinateX]) === 14){
                                    world[mouseCoordinateY-1][mouseCoordinateX] = 0;
                                    itemList[itemList.length] = new itemo(mouseCoordinateX*16*sc1+16,mouseCoordinateY*16*sc1+16,14);
                                }else{
                                    itemList[itemList.length] = new itemo(mouseCoordinateX*16*sc1+16,mouseCoordinateY*16*sc1+16,world[mouseCoordinateY][mouseCoordinateX]);
                                }
                            }
                            world[mouseCoordinateY][mouseCoordinateX] = 0;
                            breakTime = 0;
                            playSound(sound.hitBlock);
                        }
                        breakTime++;
                        //cracks
                        if(breakTime > 0){
                            stroke(0, 0, 0,(breakTime/brokenTime)*200);
                            strokeWeight((breakTime/brokenTime)*2);
                            line((mouseCoordinateX*16+8)*sc1,(mouseCoordinateY*16+8)*sc1,(mouseCoordinateX*16+4)*sc1,(mouseCoordinateY*16+6)*sc1);
                            line((mouseCoordinateX*16+8)*sc1,(mouseCoordinateY*16+8)*sc1,(mouseCoordinateX*16+12)*sc1,(mouseCoordinateY*16+4)*sc1);
                            line((mouseCoordinateX*16+8)*sc1,(mouseCoordinateY*16+8)*sc1,(mouseCoordinateX*16+4)*sc1,(mouseCoordinateY*16+14)*sc1);
                            noStroke();
                        }
                        if(breakTime > brokenTime*2/4){
                            stroke(0, 0, 0,(breakTime/brokenTime-0.5)*300);
                            strokeWeight(1);
                            line((mouseCoordinateX*16+4)*sc1,(mouseCoordinateY*16+6)*sc1,(mouseCoordinateX*16+0)*sc1,(mouseCoordinateY*16+9)*sc1);
                            line((mouseCoordinateX*16+12)*sc1,(mouseCoordinateY*16+4)*sc1,(mouseCoordinateX*16+16)*sc1,(mouseCoordinateY*16+10)*sc1);
                            line((mouseCoordinateX*16+4)*sc1,(mouseCoordinateY*16+14)*sc1,(mouseCoordinateX*16+8)*sc1,(mouseCoordinateY*16+16)*sc1);
                            noStroke();
                        }
                    }
                }
            }
        }
        if(mouseButton === RIGHT){
            if(inWorld(mouseCoordinateX,mouseCoordinateY)){
                if(world[mouseCoordinateY][mouseCoordinateX] === 0||world[mouseCoordinateY][mouseCoordinateX] === 5){
                    if(!equalToAny(curBlock,cantplace)){
                        playSound(sound.hitBlock);
                        world[mouseCoordinateY][mouseCoordinateX] = curBlock;
                        if(inventory[hotSel].amount>0){
                            inventory[hotSel].amount--;
                        }
                    }
                }
                if(world[mouseCoordinateY][mouseCoordinateX] === 14&&pDoor === false){
                    world[mouseCoordinateY][mouseCoordinateX] = 14.1;
                    pDoor = true;
                }else if(world[mouseCoordinateY][mouseCoordinateX] === 14.1&&pDoor === false){
                    world[mouseCoordinateY][mouseCoordinateX] = 14;
                    pDoor = true;
                }
            }
        }
    }else{
        breakTime = 0;
        pDoor = false;
    }
    
};
var blockSel = function(){
    for(var x = 0;x<10;x++){
        if(hotSel === x){
            if(inventory[x].blockNum>0&&inventory[x].amount>0){
                curBlock = inventory[x].blockNum;
            }else{
                curBlock = 0;
            }
        }else{
            strokeWeight(1);
            stroke(110, 110, 110,255);
        }
        fill(214, 214, 214);
        rect(x*25+75,365,25,25);
        if(inventory[x].amount>0){
            var tmpo = sc1;
            sc1 = 1;
            noStroke();
            block(x*25/16+80/16,370/16,inventory[x].blockNum);
            if(inventory[x].amount>1){
                fill(255, 255, 255);
                textAlign(RIGHT,BOTTOM);
                text(inventory[x].amount,x*25+100,25+366);
                textAlign(LEFT,BOTTOM);
            }
            sc1 = tmpo;
        }
    }
    strokeWeight(3);
    stroke(186, 186, 186,255);
    noFill();
    rect(hotSel*25+75,365,25,25);
    noStroke();
    strokeWeight(1);
};
var notSolid = [0,5,8,9,13,14.1,14.6];
var keys=[];
var keyPressed=function() {
    keys[keyCode]=true;
};
var keyReleased=function(){
    keys[keyCode]=false;
};
var level = 1;
var finished = 0;
var cube = function (x,y,w,h) {
    this.x = x; 
    this.y = y;
    this.w = w; 
    this.h = h;
};
cube.prototype.display = function() {
    fill(0, 0, 0);
    stroke(random(0,255));
    rect(this.x,this.y,this.w,this.h);
};
var cubes = [];
var addcube = function (xPosition, yPosition, width, height) {
    cubes.push(new cube(xPosition, yPosition, width, height) );
};
var displaycubes = function() {
    for (var i = 0; i < cubes.length; i++) {
        cubes[i].display();
    }
};
var lava = function (x,y,w,h) {
    this.x = x; 
    this.y = y;
    this.w = w; 
    this.h = h;
};
lava.prototype.display = function() {
    stroke(255, 0, 0);
    fill(255, 0, 0);
    rect(this.x,this.y,this.w,this.h);
};
var lavas = [];
var addlava = function(xPosition, yPosition, width, height) {
    lavas.push( new lava(xPosition, yPosition, width, height) );
};
var displaylavas = function() {
    for (var i = 0; i < lavas.length; i++) {
        lavas[i].display();
    }
};
var end = {
    x : 0,
    y : 0,
    w : 0,
    h : 0,
};
var updateend = function (x,y,w,h) {
    end.x = x;
    end.y = y;
    end.w = w;
    end.h = h;
};
var displayend = function () {
    stroke(255, 255, 255);
    fill(255, 255, 255);
    rect(end.x, end.y, end.w, end.h);
};
var you = function(x,y,w,h) {
    this.x = x; this.y = y;
    this.w = width/(300/w); this.h = height/(300/h);
    this.xVelocity = 0;
    this.yVelocity = 0;
    this.falling = true;
    
    this.gravity = height/(400/0.4);
    this.jumpHeight = height/(400/8);
    this.maxFallSpeed = height/(400/12);
    
    this.moveSpeed = width/(400/0.5);
    this.maxMoveSpeed = width/(400/5);
    
    this.spawnX = 0;
    this.spawnY = 0;
    this.deaths = 0;
    this.fr = 0;
};
you.prototype.update = function () {
    if(keys[LEFT]) { this.xVelocity -= this.moveSpeed; }
    if(keys[RIGHT]){ this.xVelocity += this.moveSpeed; }
        
    if(!keys[LEFT] && !keys[RIGHT]) {
        if(this.xVelocity>0) {
            this.xVelocity -= this.moveSpeed;
        }
        if(this.xVelocity<0) {
            this.xVelocity += this.moveSpeed;
        }
        if(this.xVelocity<0.1&&this.xVelocity>0){this.xVelocity=0;}
        if(this.xVelocity>-0.1&&this.xVelocity<0){this.xVelocity=0;}
    }
    if(keys[UP] && !this.falling) {
        this.yVelocity = -this.jumpHeight;
    }
        
    this.yVelocity += this.gravity;
        
    if(this.yVelocity > this.maxFallSpeed) {
        this.yVelocity = this.maxFallSpeed;}
        
    if(this.xVelocity > this.maxMoveSpeed) {
        this.xVelocity = this.maxMoveSpeed;}
            
    if(this.xVelocity < -this.maxMoveSpeed) {
        this.xVelocity = -this.maxMoveSpeed;}
    this.x += this.xVelocity;
    this.collideWith(this.xVelocity,0);
    this.falling = true;
        
        
    this.y += this.yVelocity;
    this.collideWith(0,this.yVelocity);
    if (this.fr > 0) {
        this.fr--;
    }
};
you.prototype.collideWith = function(xv, yv) {
    for (var i = 0; i < cubes.length; i++) {
        var b = cubes[i];
        if( this.y+this.h > b.y &&
            this.y        < b.y+b.h &&
            this.x+this.w > b.x &&
            this.x        < b.x+b.w) {
            if(yv>0) {
                this.yVelocity = 0;
                this.falling = false;
                this.y = b.y-this.h;
            }
            if(yv<0) {
                this.yVelocity = 0;
                this.falling = true;
                this.y = b.y+b.h;
            }
            if(xv>0) {
                this.xVelocity = 0;
                this.x = b.x-this.w;
            }
            if(xv<0) {
                this.xVelocity = 0;
                this.x = b.x+b.w;
            }
        }
    }
    for (var i = 0; i < lavas.length; i++) {
        var o = lavas[i];
        if( this.y+this.h > o.y &&
            this.y        < o.y+o.h &&
            this.x+this.w > o.x &&
            this.x        < o.x+o.w &&
            this.fr ===     0)
        {
            this.x = this.spawnX;
            this.y = this.spawnY;
            this.deaths++;
        }
    }
    var g = end;
    if( this.y+this.h > g.y &&
        this.y        < g.y+g.h &&
        this.x+this.w > g.x &&
        this.x        < g.x+g.w) {
        if (frameCount > finished + 50) {
            level += 1;
            finished = frameCount;
        }
    }
};
you.prototype.display = function() {
    noStroke();
    fill(255, 255, 255);
    rect(this.x,this.y,this.w,this.h,4);
};
var levels = [
    [
        ["11111111111111111111",""],
        ["1                  1"],//2 : spawn
        ["1                  1"],//1 : cube
        ["1                  1"],//$ : coin
        ["1                  1"],//4 : end
        ["1                  1"],//3 : lava
        ["1                  1"],//& : power-up
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1        33        1"],
        ["12  $   &11&  $   41"],
        ["11111111111111111111"],
    ],
    [
        ["11111111111111111111","Level 1 Intro To Parkour"],
        ["1                  1"],//2 : spawn
        ["1                  1"],//1 : cube
        ["1                  1"],//$ : coin
        ["1                  1"],//4 : end
        ["1                  1"],//3 : lava
        ["1                  1"],//& : power-up
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["12                41"],
        ["11133113311331133111"],
        ["11111111111111111111"],
        ["11111111111111111111"],
    ],
    [
        ["11111111111111111111","Level 2 More Parkour"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1        33        1"],
        ["1       1111       1"],
        ["1     31111113     1"],
        ["1    1111111111    1"],
        ["1  31111111111113  1"],
        ["1 111111111111111111"],
        ["11111111111111111111"],
        ["11111111111111111111"],
    ],
    [
        ["11111111111111111111","Level 3 Even More Parkour"],
        ["1                  1"],//2 : spawn
        ["12                 1"],//1 : cube
        ["113311331133113311 1"],//$ : coin
        ["111111111111111111 1"],//4 : end
        ["1                  1"],//3 : lava
        ["1                  1"],//& : power-up
        ["1                  1"],
        ["1                  1"],
        ["1 113311331133113311"],
        ["1 111111111111111111"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["111331133113311331 1"],
        ["111111111111111111 1"],
        ["1                  1"],
        ["1                  1"],
        ["14                 1"],
        ["11111111111111111111"],
    ],
    [
        ["11111111111111111111","Level 4"],
        ["12                 1"],//2 : spawn
        ["11                 1"],//1 : cube
        ["111                1"],//$ : coin
        ["1111               1"],//4 : end
        ["11111              1"],//3 : lava
        ["111111             1"],//& : power-up
        ["1111111            1"],
        ["11111111           1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["13333333333333    41"],
        ["11111111111111111111"],
    ],
    [
        ["11111111111111111111","Level 5 The Slopes"],
        ["1                  1"],//2 : spawn
        ["1                  1"],//1 : cube
        ["12                 1"],//$ : coin
        ["111   11  13       1"],//4 : end
        ["1 1   11   13      1"],//3 : lava
        ["1 133311333313     1"],//& : power-up
        ["1 1111111111113    1"],
        ["1             1    1"],
        ["1                  1"],
        ["1                111"],
        ["1                  1"],
        ["1        11111     1"],
        ["1      3 3         1"],
        ["1     3 3          1"],
        ["1    3 3           1"],
        ["1   3 3            1"],
        ["14 3 3             1"],
        ["13333333333333333331"],
        ["11111111111111111111"],
    ],
    [
        ["11111111111111111111","Level 6 The Infinity Jump!"],
        ["1                  1"],//2 : spawn
        ["1                  1"],//1 : cube
        ["1                  1"],//$ : coin
        ["1                  1"],//4 : end
        ["12                 1"],//3 : lava
        ["11113           3111"],//& : power-up
        ["1   13         31  1"],
        ["1    13       31   1"],
        ["1     13     31    1"],
        ["1      13   31     1"],
        ["1       13 31      1"],
        ["1   3    1 1   3   1"],
        ["1    3        3    1"],
        ["1     3      3     1"],
        ["1                  1"],
        ["13333333334333333331"],
        ["11111111111111111111"],
        ["13333333333333333331"],
        ["11111111111111111111"],
    ],
    [
        ["11111111111111111111","Level 7 By YugalG Really Easy!"],
        ["1                  1"],//2 : spawn
        ["12                 1"],//1 : cube
        ["1                  1"],//$ : coin
        ["1                  1"],//4 : end
        ["1                  1"],//3 : lava
        ["1                  1"],//& : power-up
        ["111111111111       1"],
        ["11111111111111111  1"],
        ["1333333333333333   1"],
        ["11111111111111111  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1                  1"],
        ["1         3333     1"],
        ["14        1111     1"],
        ["11111111111111111111"],
    ]
        
];
level = 1;
var number;
var you = new you(0,0,15,15);
var screenSize = 20;
var drawLevel = function (level) {
    for(var i = 0; i < level.length; i++) {
        for(var j = 0; j < level[i][0].length; j++) {
            number = level[i][0][j];
            if(number === "1") {
                addcube(j*width/screenSize, i*height/screenSize, width/screenSize, height/screenSize);
            } else if (number === "2") {
                you.spawnX = j*width/screenSize;
                you.spawnY = i*height/screenSize;
            } else if (number === "3") {
                addlava(j*width/screenSize, i*height/screenSize, width/screenSize, height/screenSize);
            } else if (number === "4") {
                updateend(j*width/screenSize, i*height/screenSize, width/screenSize, height/screenSize);
        }
        }
    }
};
drawLevel(levels[level]);
var plevel = 1;
var nextlevel = function () {
    if (level > plevel && level <= levels.length -1) {
        plevel = level;
        cubes = [];
        lavas = [];
        you.fr = 0;
        drawLevel(levels[level]);
        you.x = you.spawnX;
        you.y = you.spawnY;
    }
};
you.x = you.spawnX;
you.y = you.spawnY;
var on = false;
var lock = true;
var mouseClick  = false;
var openApp = "safari";
var Scr = 0;
var NOScr = false;
var isTwoDigits = function(num) {
	return floor(abs(num)).toString().length === 2;
};
var mouseIn = function(x,y,w,h){
    if(mouseX > x && mouseY > y && mouseX < x+w && mouseY < y+h){
        return true;
    }else{
        return false;
    }
};
var homePressed = function(){
    if(mouseIn(185,365,30,30) && mouseIsPressed){
        return true;
    }else{
        return false;
    }
};
var desktime = 0;
var slider = function() {
    for(var i = 0; i<width; i++){
        stroke(lerpColor(color(255, 0, 0), color(190, 219, 24), i/width));
        line(i,0,i,width);
    }
    noStroke();
    fill(125, 125, 125,100);
    rect(100,300,200,30,10);
    fill(255, 255, 255);
    fill(153, 153, 153);
    if(mouseIn(120,300,160,30)&& mouseIsPressed){
        rect(mouseX-20,300,40,30,10);
        fill(255, 255, 255);
        rect(mouseX-15,310,20,10);
        triangle(mouseX+5,305,mouseX+15,315,mouseX+5,325);
        if(mouseX > 260){
            lock = false;
            NOScr = true;
            openApp = "home";
        }
    }else{
        rect(100,300,40,30,10);
        fill(173, 173, 173);
        rect(105,310,20,10);
        triangle(125,305,135,315,125,325);
        fill(255, 255, 255);
        textSize(10);
        text("Swipe to unlock",155,320);
    }
     
    var m = minute();
    var h = hour();
    var per = (h < 12) ? "AM" : (h === 12 || h > 12) ? "PM" : "";
    m = m < 10 ? "0" + m : m;
    h = h === 0 ? 12 : h > 12 ? h - 12 : h;
    fill(255, 255, 255);
    textFont(createFont("monospace", 20), 20);
    textSize(100);
    text(h + ":" + m, 80, 123);
    textSize(10);
    desktime = 0;
};
var apps = [
    {
        color:[0,255,40],
        name:"TestApp"
    },
    {
        color:[255,0,0],
        name:"RedBall"
    },
    {
        color:[0,255,255],
        name:"Minecraft"
    }
    ];
var bckScr = -10;
var draw = function() {
    textAlign(LEFT,BOTTOM);
    if(homePressed()){
        if(on === false){
            on = true;
        }
    }
    if(on === true){
        if(lock === true){
            slider();
        }else{
            switch(openApp){
                case "home":
                    for(var i = 0; i<width; i++){
                        stroke(lerpColor(color(255, 0, 0), color(190, 219, 24), i/width));
                        line(i,0,i,width);
                    }
                noStroke();
                textSize(30);
                fill(64, 64, 64);
                ellipse(181,298,20,20);
                fill(255, 255, 255);
                ellipse(210,298,20,20);
                fill(163, 163, 163);
                rect(0,0,400,20);
                if(Scr >= 0){
                    fill(150, 150, 150,100);
                    quad(100,330,300,330,320,360,80,360);
                }
                if(Scr === 0){
                    for(var i = 0; i<apps.length;i++){
                    fill(apps[i].color[0], apps[i].color[1], apps[i].color[2]);
            
                if(i < 4){
                    rect(75+(i*64),40,32,32,5);
                    fill(0, 0, 0);
                    textAlign(CENTER,BOTTOM);
                    textSize(11);
                    text(apps[i].name,69+(i*64),67,45,39);
                    if(mouseIn(75+(i*64),40,32,32,5) && mouseIsPressed){
                        openApp = apps[i].name;
                    }
                }else{
                if(i >= 4 && i < 8){
                    rect(75+(i-4)*64,100,32,32,5);
                    fill(0, 0, 0);
                    textSize(11);
                    text(apps[i].name,69+(i-4)*64,127,45,39);
                    if(mouseIn(75+(i-4)*64,100,32,32,5) && mouseIsPressed){
                    openApp = apps[i].name;
                }
                }else{
                    rect(75+(i-8)*64,160,32,32,5);
                    fill(0, 0, 0);
                    textSize(11);
                    text(apps[i].name,69+(i-8)*64,187,45,39);
                }
            }
        }
        bckScr = -10;
    }
    if(Scr === 1){
        for(var i = 0; i<width; i++){
            stroke(lerpColor(color(255, 0, 0), color(190, 219, 24), i/width));
            line(i,0,i,width);
        }
        noStroke();
        fill(163, 163, 163);
        rect(0,0,400,20);
        fill(0, 0, 0);
        textSize(20);
        text("Have more ideas for apps? Please\ntell me now by sending a game\nthat can be made into a app.\n\nThank you!",9,113);
        fill(255, 255, 255);
        ellipse(181,298,20,20);
        fill(64,64,64);
        ellipse(210,298,20,20);
        fill(150, 150, 150,100);
        quad(100,330,300,330,320,360,80,360);
        bckScr = -20;
    }
    if(mouseIsPressed){
    if(mouseX-20 > pmouseX && NOScr === false && Scr > -1){
        Scr--;
        NOScr = true;
    }
    if(mouseX+20 < pmouseX && NOScr === false && Scr < 1){
        Scr++;
        NOScr = true;
    }
    }else{
        NOScr = false;
    }
    if(homePressed()){
        Scr = 0;
    }
                    break;
                case "TestApp":
                    background(255, 255, 255);
                    textSize(30);
                    fill(0, 0, 0);
                    text("Test App.",119,66);
                    textSize(10);
                    text("This is a test app.",135,83);
                    fill(166, 166, 166);
                    rect(89,110,220,220,30);
                    textSize(250);
                    fill(255, 0, 0);
                    text("T",123,355);
                    break;
                case "RedBall":
                    resetMatrix();
                    frameRate(17);
                    rectMode(UP);
                    background(176, 176, 176);
                    you.update();
                    nextlevel();
                    displaylavas();
                    displayend();
                    displaycubes();
                    you.display();
                    fill(0, 0, 0);
                    rect(0,0,width/(400/you.fr),10);
                    textAlign(CENTER, CENTER);
                    resetMatrix();
                    break;
                case "Minecraft":
                    if(time < 200){
        background(0, 238, 255);
        night = false;
    }else{
        background(0, 10, 61);
        night = true;
    }
    var tmpCol = color(0, 0, 0);
    if((time>160&time<200)){
        if(time<180){
            var tmpCol = lerpColor(color(0, 238, 255),color(255, 132, 0),((time-160)/20));
        }else{
            var tmpCol = lerpColor(color(255, 132, 0),color(150, 133, 0),((time-180)/20));
        }
        background(tmpCol);
    }
    if(time<-125){
        if(time>-175){
            var tmpCol = lerpColor(color(255, 132, 0),color(0, 238, 255),((time+175)/50));
        }else{
            var tmpCol = lerpColor(color(150, 133, 0),color(255, 132, 0),((time+200)/35));
        }
        background(tmpCol);
    }
    if((time>199&time<225)){
        var tmpCol = lerpColor(color(150, 133, 0),color(0, 10, 61),((time-199)/35));
        background(tmpCol);
    }else if(time>575){
        var tmpCol = lerpColor(color(0, 10, 61),color(150, 133, 0),((time-575)/35));
        background(tmpCol);
    }
    rect(0,300-floor((characterloc[1])/3),400,200);
    translate(-characterloc[0]*sc1+200,-characterloc[1]*sc1+150);
    fill(92, 92, 92);
    fill(71, 71, 71);
    rect(0,(world.length)*16*sc1,world[1].length*16*sc1,400);
    for(var i = 0;i<world[1].length;i++){
        for(var c12 = 0;c12<world.length;c12++){
            if(i>(characterloc[0]/16)-10 & i < (characterloc[0] / 16) + 10 & c12 < (characterloc[1]/16)+10){
                if(backo[c12][i] === true && underbc){
                    fill(99, 99, 99);
                    rect(i*16*sc1,c12*16*sc1,16*sc1,16*sc1);
                }
                fill(0, 0, 0);
                block(i,c12,world[c12][i]);
                if(world[c12][i] !== 0 & night === true & (i*16)>(characterloc[0]-200)&(i*16<characterloc[0]+200)&c12*16<characterloc[1]+200 & world[c12][i] !== 8){
                    fill(0, 0, 0,50);
                    rect(i*16*sc1,c12*16*sc1,16*sc1,16*sc1);
                }
                if(world[c12][i] === 1&&world[c12-1][i] !== 0){
                    if(animation === 5){
                        world[c12][i] = 6;
                    }
                }
                if(world[c12][i] === 6&&world[c12-1][i] ===  0){
                    if(animation === 5){
                        world[c12][i] = 1;
                    }
                }
            }
        }
    }
    if(night === true){
        for(var yo = 0;yo<40;yo++){
            for(var xo = 0;xo<100;xo++){
                if(world[yo][xo] === 8){
                    fill(255, 221, 0,50);
                    rect(xo*16*sc1-32*sc1,yo*16*sc1-32*sc1,80*sc1,80*sc1);
                }
            }
        }
    }
    walking = false;
    if(keyIsPressed === true){
        if((keys[39] === true || keys[68] === true) &equalToAny(frn[0],notSolid)&equalToAny(bftop[1],notSolid)){
            characterloc[0] = characterloc[0]+9/sc1;
            direction = 1;
            walking = true;
        }if((keys[37] === true||keys[65] === true) & equalToAny(bck,notSolid)&equalToAny(bftop[0],notSolid)){
            characterloc[0] = characterloc[0]-(9/sc1);
            direction = -1;
            walking = true;
        }if((keys[38] === true|keys[32] === true||keys[6] === true||keys[78] === true) && equalToAny(top,notSolid)){
            if(world[floor(characterloc[1]/16+1)][floor(characterloc[0]/16)] === 9 | world[floor(characterloc[1]/16+1)][floor(characterloc[0]/16)] === 5){
                characterVel.x = -1;
            }else if(feet !== 0){
                characterVel.x = -3.5;
            }
        }
    }
    animation++;
    if(animation>16){
        animation = 0;
    }
    cont();
    if(inWorld(characterloc[0],characterloc[1]-1)&inWorld(characterloc[0],characterloc[1]+3)){
        feet = world[floor(characterloc[1]/16+2)][floor(characterloc[0]/16)];
        frn = [world[floor(characterloc[1]/16+1.5)][floor(characterloc[0]/16+0.5)],world[floor(characterloc[1]/16+0.5)][floor(characterloc[0]+0.5)]];
        bck = world[floor(characterloc[1]/16+1.5)][floor(characterloc[0]/16-0.3)];
        top = world[floor(characterloc[1]/16-1)][floor(characterloc[0]/16)];
        bftop = [world[floor(characterloc[1]/16)][floor(characterloc[0]/16-0.3)],world[floor(characterloc[1]/16)][floor(characterloc[0]/16+0.5)]];
        if(!equalToAny(world[floor(characterloc[1]/16)][floor(characterloc[0]/16)],notSolid)){
        }
    }
    if(bck === 14){
        bftop[0] = 14;
    }
    if(frn === 14){
        bftop[1] = 14;
    }
    if(characterloc[1]<32){
        characterloc[1] = 32;
        
    }
    character(characterloc[0],characterloc[1],direction);
    if(feet === 0 | feet === 5 | feet === 8 | feet === 9 | feet === 12){
        if(characterVel.x<5&&feet !== 5){
            characterVel.x++;
        }else if(feet === 5){
            characterVel.x += 0.05;
            characterVel.x = min(characterVel.x,1);
        }
    }else{
        characterVel.x = 0;
        characterloc[1] = floor(characterloc[1]/16)*16;
    }
    resetMatrix();
    blockSel();
    noStroke();
    if(mouseX > 205){
        direction = 1;
    }
    if(mouseX < 205){
        direction = -1;
    }

                    break;
            }
        }
        if(homePressed()){
            openApp = "home";
        }
    }else{
        background(33, 33, 33);
    }
    fill(0, 0, 0);
    rect(0,364,404,76);
    if(homePressed()){
        stroke(0, 0, 0);
    }
    ellipse(200,380,30,30);
    fill(255, 255, 255,50);
    bezier(185,380,185,372,192,365,200,365);
    fill(26, 26, 26,0);
    stroke(255, 255, 255);
    rect(195,375,9,9,3);
    noStroke();
    fill(255, 255, 255,100);
    noStroke();

};
var mousePressed = function(){
    if(mouseIn(360,0,30,10)){
    if(on === true){
        on = false;
        lock = true;
    }else{
        on = true;
    }
    }
};
